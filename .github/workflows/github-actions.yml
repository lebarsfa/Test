#on: [push, pull_request]
on: 
    release:
#    push:
#        branches: '**'
        branches: 'master'
#        tags: '' # Restrict to blank tags
        tags: 'ibex-*.*.*'
#    pull_request:
jobs:
 # This job may be commented if a new release should not be created...
# deploy:
#    runs-on: ubuntu-latest
#    steps: 
#    - uses: actions/create-release@v1
#      id: create_release
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        draft: true
#        tag_name: autotagname
#        release_name: autotagname
 matrix:
    runs-on: ${{ matrix.cfg.os }}
    container: ${{ matrix.cfg.container }}
    defaults:
        run:
            shell: ${{ matrix.cfg.shell }}
    strategy:
        matrix:
            cfg:
            - { os: ubuntu-18.04, shell: bash, arch: amd64, runtime: bionic, container: 'amd64/ubuntu:bionic', desc: 'Ubuntu 18.04 amd64' }
            - { os: ubuntu-16.04, shell: bash, arch: i386, runtime: xenial, container: 'i386/ubuntu:xenial', desc: 'Ubuntu 16.04 x86' }
            - { os: ubuntu-latest, shell: bash, arch: i386, runtime: trusty, container: 'i386/ubuntu:trusty', desc: 'Ubuntu 14.04 x86' }
#            - { os: ubuntu-latest, shell: bash, arch: armhf, runtime: buster, container: 'lebarsfa/pi:buster', desc: 'pi' }
    name: ${{ matrix.cfg.desc }}
    steps: 
#    - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
#      if: contains(matrix.cfg.container, 'pi')
    - uses: actions/checkout@v1 # https://github.community/t/actions-checkout-v2-fails-in-32bit-container/165539/2
      # From https://github.com/Munkei/VersionFromGit.cmake/blob/master/VersionFromGit.cmake
    - run: echo "git_tag=`git describe --tags --abbrev=0`" >> $GITHUB_ENV
      shell: bash
      # See https://askubuntu.com/questions/620533/what-is-the-meaning-of-the-xubuntuy-string-in-ubuntu-package-names
    - run: |
        echo "SOFTWARE_VERSION=${git_tag:5}" >> $GITHUB_ENV
        echo "DEBIAN_PACKAGE_REV=0" >> $GITHUB_ENV
        echo "PACKAGE_REV=0" >> $GITHUB_ENV
        echo "CHOCO_PACKAGE_REV=" >> $GITHUB_ENV
      shell: bash
    - run: if [ -z "$CHOCO_PACKAGE_REV" ]; then echo "PACKAGE_VERSION=$SOFTWARE_VERSION" >> $GITHUB_ENV ; else echo "PACKAGE_VERSION=$SOFTWARE_VERSION.$CHOCO_PACKAGE_REV" >> $GITHUB_ENV ; fi
      shell: bash
      if: runner.os=='Windows'
    - run: echo "PACKAGE_VERSION=$SOFTWARE_VERSION-${DEBIAN_PACKAGE_REV}${{ matrix.cfg.runtime }}$PACKAGE_REV" >> $GITHUB_ENV
      shell: bash
      if: runner.os=='Linux'
    - run: |
        uname -a && cat /etc/os-release
        apt-get -q update && apt-get -y install lsb-release && lsb_release -a
#        cmake .

# container: ${{ matrix.cfg.container }} cannot be empty, pi does not work, the containers don't have cmake...->self-hosted runners but no i386 but maybe possible to configure amd64 so that it acts like an i386...?
